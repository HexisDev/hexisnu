// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require bootstrap
//= require_tree .
//= require nested_form_fields

var seats, rows;
var selectedSeat = {i: 0, j: 0};
var canvas;
const SEAT_SIZE = 20;
const SEAT_GAP = 5;

function renderSeatmap(canvas){
  //Render base canvas
  ctx = canvas.getContext('2d');
  ctx.beginPath();
  ctx.rect(0, 0, 600, 300);
  ctx.fillStyle = 'white';
  ctx.fill();
  ctx.lineWidth = 2;
  ctx.strokeStyle = 'black';
  ctx.stroke();

  //Render all seats
  for(i = 0; i < rows.length; i++){
    for(j = 0; j < rows[i].seats.length; j++){
      ctx.beginPath();
      coords = getViewCoord(i, j);
      ctx.rect(coords.x, coords.y, SEAT_SIZE, SEAT_SIZE);
      if(rows[i].seats[j].state == "available"){
        ctx.fillStyle = 'green';
      }else{
        ctx.fillStyle = 'red';
      }
      ctx.fill();
      if(rows[i].seats[j].selected == true){
        ctx.rect(coords.x, coords.y, SEAT_SIZE, SEAT_SIZE);
        ctx.stroke();
      }
    }
  }
}

function initSeatmap(){
  seats = new Array();
  rows = new Array();
  updateSeatVariables();
  canvas = document.getElementById('smCanvas');
  renderSeatmap(canvas);

  canvas.addEventListener('mousemove', function(evt) {
    renderSeatmap(canvas);
    var mousePos = getMousePos(canvas, evt);
    var message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;
    printText(canvas, message, mousePos.x, mousePos.y);
  }, false);

  canvas.addEventListener('mousedown', function(evt) {
    handleMouseClick(canvas, evt);
  }, false);
}

function handleMouseClick(canvas, evt){
  var mousepos = getMousePos(canvas, evt);
  ij = getSeatFromCoord(mousepos.x, mousepos.y);
  if(ij.i != null && ij.j != null)
    selectSeat(ij.i, ij.j);
  renderSeatmap(canvas);
}

function selectSeat(i, j){
  if(selectedSeat != null){
    rows[selectedSeat.i].seats[selectedSeat.j].selected = false;
  }
  rows[i].seats[j].selected = true;
  selectedSeat = {i: i, j: j};
}

function getSeatFromCoord(inX, inY){
  for(i = 0; i < rows.length; i++){
    for(j = 0; j < rows[i].seats.length; j++){
      coords = getViewCoord(i, j);
      if(inX >= coords.x && inX <= coords.x + SEAT_SIZE && inY >= coords.y && inY <= coords.y + SEAT_SIZE){
        return {i: i, j: j};
      }
    }
  }
  return false;
}

function getViewCoord(rowNumber, seatNumber){
  x = j < Math.floor(rows[i].seats.length/2) ? rows[i].x_coord : rows[i].x_coord + (SEAT_SIZE + SEAT_GAP);
  y = j < Math.floor(rows[i].seats.length/2) ? rows[i].y_coord + rows[i].seats[j].number * (SEAT_SIZE + SEAT_GAP) : rows[i].y_coord + rows[i].seats[j].number * (SEAT_SIZE + SEAT_GAP) - Math.floor(rows[i].seats.length/2)*(SEAT_SIZE + SEAT_GAP);
  return {
    x: x,
    y: y
  };
}

function getMousePos(canvas, evt) {
  var rect = canvas.getBoundingClientRect();
  return {
    x: evt.clientX - rect.left,
    y: evt.clientY - rect.top
  };
}

function updateMap(data){
  $.ajax({
    type: "PATCH",
    contentType: 'application/json',
    data: data,
    dataType: 'json',
    complete: function(){
      updateSeatVariables();
    }
  });
}

function updateSeatVariables(){
  $.ajax({
    type: "GET",
    contentType: 'application/json',
    dataType: 'json',
    success: function(data){
      rows = data.rows;
      renderSeatmap(canvas);
    }
  });
}

function printText(canvas, message, x, y) {
  var ctx = canvas.getContext('2d');
  ctx.font = '18pt Calibri';
  ctx.fillStyle = 'black';
  ctx.fillText(message, x, y);
}

$(document).ready(initSeatmap);
$(document).on('page:load', initSeatmap);
